import"./sidebar.min.js";import"./nav.min.js";const navUserNameSpan=document.querySelector(".nav__greeting-person"),currentNameSpan=document.querySelector(".user-name"),navAvatar=document.querySelector(".nav__avatar"),navAvatarImg=navAvatar.firstElementChild,changeNameInput=document.querySelector(".settings__name-input"),changeNameValidateInfo=document.querySelector(".new-name-input-error"),avatarsForm=document.querySelector(".settings__avatar-list"),settingsSaveBtn=document.querySelector(".settings__btn");let userSettings={userName:"",avatarSrc:""};const downloadUserSettingsFromLocalStorage=()=>{var e=JSON.parse(localStorage.getItem("userSettingsLocalCopy"));null!==e&&(userSettings=e,navAvatarImg.setAttribute("src",userSettings.avatarSrc),navUserNameSpan.textContent=userSettings.userName,currentNameSpan.textContent=userSettings.userName)},updateLocalStorage=()=>{var e=JSON.stringify(userSettings);localStorage.setItem("userSettingsLocalCopy",e)},updateUserNameInNav=()=>{var e=changeNameInput.value;e.length<=3?changeNameValidateInfo.style.display="block":(changeNameValidateInfo.style.display="none",userSettings.userName=e,currentNameSpan.textContent=e,navUserNameSpan.textContent=e)},markAvatarAsChecked=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode;e.checked?t.classList.add("settings__avatar-item--checked"):t.classList.remove("settings__avatar-item--checked")})},updateUserAvatar=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode,e=e.previousElementSibling.lastElementChild;t.classList.contains("settings__avatar-item--checked")&&(t=e.getAttribute("src"),navAvatarImg.setAttribute("src",t),userSettings.avatarSrc=t)})};downloadUserSettingsFromLocalStorage(),markAvatarAsChecked(),avatarsForm.addEventListener("click",markAvatarAsChecked),settingsSaveBtn.addEventListener("click",updateUserNameInNav),settingsSaveBtn.addEventListener("click",updateUserAvatar),settingsSaveBtn.addEventListener("click",updateLocalStorage);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MubWluLmpzIiwic291cmNlcyI6WyJzZXR0aW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc2lkZWJhci5taW4uanMnO1xyXG5pbXBvcnQgJy4vbmF2Lm1pbi5qcyc7XHJcblxyXG5jb25zdCBuYXZVc2VyTmFtZVNwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19ncmVldGluZy1wZXJzb24nKTtcclxuY29uc3QgY3VycmVudE5hbWVTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItbmFtZScpO1xyXG5jb25zdCBuYXZBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19hdmF0YXInKTtcclxuY29uc3QgbmF2QXZhdGFySW1nID0gbmF2QXZhdGFyLmZpcnN0RWxlbWVudENoaWxkO1xyXG5cclxuY29uc3QgY2hhbmdlTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19uYW1lLWlucHV0Jyk7XHJcbmNvbnN0IGNoYW5nZU5hbWVWYWxpZGF0ZUluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LW5hbWUtaW5wdXQtZXJyb3InKTtcclxuXHJcbmNvbnN0IGF2YXRhcnNGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19hdmF0YXItbGlzdCcpO1xyXG5jb25zdCBzZXR0aW5nc1NhdmVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3NfX2J0bicpO1xyXG5cclxubGV0IHVzZXJTZXR0aW5ncyA9IHtcclxuXHR1c2VyTmFtZTogJycsXHJcblx0YXZhdGFyU3JjOiAnJyxcclxufTtcclxuXHJcbmNvbnN0IGRvd25sb2FkVXNlclNldHRpbmdzRnJvbUxvY2FsU3RvcmFnZSA9ICgpID0+IHtcclxuXHRsZXQgcGFyc2VkQXJyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlclNldHRpbmdzTG9jYWxDb3B5JykpO1xyXG5cclxuXHRpZiAocGFyc2VkQXJyICE9PSBudWxsKSB7XHJcblx0XHR1c2VyU2V0dGluZ3MgPSBwYXJzZWRBcnI7XHJcblx0XHRuYXZBdmF0YXJJbWcuc2V0QXR0cmlidXRlKCdzcmMnLCB1c2VyU2V0dGluZ3MuYXZhdGFyU3JjKTtcclxuXHRcdG5hdlVzZXJOYW1lU3Bhbi50ZXh0Q29udGVudCA9IHVzZXJTZXR0aW5ncy51c2VyTmFtZTtcclxuXHRcdGN1cnJlbnROYW1lU3Bhbi50ZXh0Q29udGVudCA9IHVzZXJTZXR0aW5ncy51c2VyTmFtZTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCB1cGRhdGVMb2NhbFN0b3JhZ2UgPSAoKSA9PiB7XHJcblx0bGV0IHNldHRpbmdzU3RyID0gSlNPTi5zdHJpbmdpZnkodXNlclNldHRpbmdzKTtcclxuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlclNldHRpbmdzTG9jYWxDb3B5Jywgc2V0dGluZ3NTdHIpO1xyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlVXNlck5hbWVJbk5hdiA9ICgpID0+IHtcclxuXHRjb25zdCBuZXdOYW1lID0gY2hhbmdlTmFtZUlucHV0LnZhbHVlO1xyXG5cclxuXHRpZiAobmV3TmFtZS5sZW5ndGggPD0gMykge1xyXG5cdFx0Y2hhbmdlTmFtZVZhbGlkYXRlSW5mby5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHR9IGVsc2Uge1xyXG5cdFx0Y2hhbmdlTmFtZVZhbGlkYXRlSW5mby5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0dXNlclNldHRpbmdzLnVzZXJOYW1lID0gbmV3TmFtZTtcclxuXHRcdGN1cnJlbnROYW1lU3Bhbi50ZXh0Q29udGVudCA9IG5ld05hbWU7XHJcblx0XHRuYXZVc2VyTmFtZVNwYW4udGV4dENvbnRlbnQgPSBuZXdOYW1lO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IG1hcmtBdmF0YXJBc0NoZWNrZWQgPSAoKSA9PiB7XHJcblx0Wy4uLmF2YXRhcnNGb3JtXS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG5cdFx0Y29uc3QgYXZhdGFySXRlbSA9IGlucHV0LnBhcmVudE5vZGU7XHJcblxyXG5cdFx0aWYgKGlucHV0LmNoZWNrZWQpIHtcclxuXHRcdFx0YXZhdGFySXRlbS5jbGFzc0xpc3QuYWRkKCdzZXR0aW5nc19fYXZhdGFyLWl0ZW0tLWNoZWNrZWQnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGF2YXRhckl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2V0dGluZ3NfX2F2YXRhci1pdGVtLS1jaGVja2VkJyk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5jb25zdCB1cGRhdGVVc2VyQXZhdGFyID0gKCkgPT4ge1xyXG5cdFsuLi5hdmF0YXJzRm9ybV0uZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuXHRcdGNvbnN0IGF2YXRhckl0ZW0gPSBpbnB1dC5wYXJlbnROb2RlO1xyXG5cdFx0Y29uc3QgY2hlY2tlZEF2YXRhckltZyA9IGlucHV0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcubGFzdEVsZW1lbnRDaGlsZDtcclxuXHJcblx0XHRpZiAoYXZhdGFySXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ3NldHRpbmdzX19hdmF0YXItaXRlbS0tY2hlY2tlZCcpKSB7XHJcblx0XHRcdGNvbnN0IGF2YXRhckZpbGVQYXRoID0gY2hlY2tlZEF2YXRhckltZy5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xyXG5cclxuXHRcdFx0bmF2QXZhdGFySW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgYXZhdGFyRmlsZVBhdGgpO1xyXG5cdFx0XHR1c2VyU2V0dGluZ3MuYXZhdGFyU3JjID0gYXZhdGFyRmlsZVBhdGg7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5kb3dubG9hZFVzZXJTZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2UoKTtcclxubWFya0F2YXRhckFzQ2hlY2tlZCgpO1xyXG5hdmF0YXJzRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG1hcmtBdmF0YXJBc0NoZWNrZWQpO1xyXG5zZXR0aW5nc1NhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVVc2VyTmFtZUluTmF2KTtcclxuc2V0dGluZ3NTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlVXNlckF2YXRhcik7XHJcbnNldHRpbmdzU2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZUxvY2FsU3RvcmFnZSk7XHJcbiJdLCJuYW1lcyI6WyJuYXZVc2VyTmFtZVNwYW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjdXJyZW50TmFtZVNwYW4iLCJuYXZBdmF0YXIiLCJuYXZBdmF0YXJJbWciLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoYW5nZU5hbWVJbnB1dCIsImNoYW5nZU5hbWVWYWxpZGF0ZUluZm8iLCJhdmF0YXJzRm9ybSIsInNldHRpbmdzU2F2ZUJ0biIsImxldCIsInVzZXJTZXR0aW5ncyIsInVzZXJOYW1lIiwiYXZhdGFyU3JjIiwiZG93bmxvYWRVc2VyU2V0dGluZ3NGcm9tTG9jYWxTdG9yYWdlIiwicGFyc2VkQXJyIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwidXBkYXRlTG9jYWxTdG9yYWdlIiwic2V0dGluZ3NTdHIiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwidXBkYXRlVXNlck5hbWVJbk5hdiIsIm5ld05hbWUiLCJ2YWx1ZSIsImxlbmd0aCIsInN0eWxlIiwiZGlzcGxheSIsIm1hcmtBdmF0YXJBc0NoZWNrZWQiLCJmb3JFYWNoIiwiYXZhdGFySXRlbSIsImlucHV0IiwicGFyZW50Tm9kZSIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJ1cGRhdGVVc2VyQXZhdGFyIiwiY2hlY2tlZEF2YXRhckltZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJsYXN0RWxlbWVudENoaWxkIiwiY29udGFpbnMiLCJhdmF0YXJGaWxlUGF0aCIsImdldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJNQUFPLHlCQUNBLGVBRVAsTUFBTUEsZ0JBQWtCQyxTQUFTQyxjQUFjLHVCQUF1QixFQUNoRUMsZ0JBQWtCRixTQUFTQyxjQUFjLFlBQVksRUFDckRFLFVBQVlILFNBQVNDLGNBQWMsY0FBYyxFQUNqREcsYUFBZUQsVUFBVUUsa0JBRXpCQyxnQkFBa0JOLFNBQVNDLGNBQWMsdUJBQXVCLEVBQ2hFTSx1QkFBeUJQLFNBQVNDLGNBQWMsdUJBQXVCLEVBRXZFTyxZQUFjUixTQUFTQyxjQUFjLHdCQUF3QixFQUM3RFEsZ0JBQWtCVCxTQUFTQyxjQUFjLGdCQUFnQixFQUUvRFMsSUFBSUMsYUFBZSxDQUNsQkMsU0FBVSxHQUNWQyxVQUFXLEVBQ1osRUFFQSxNQUFNQyxxQ0FBdUMsS0FDNUNKLElBQUlLLEVBQVlDLEtBQUtDLE1BQU1DLGFBQWFDLFFBQVEsdUJBQXVCLENBQUMsRUFFdEQsT0FBZEosSUFDSEosYUFBZUksRUFDZlgsYUFBYWdCLGFBQWEsTUFBT1QsYUFBYUUsU0FBUyxFQUN2RGQsZ0JBQWdCc0IsWUFBY1YsYUFBYUMsU0FDM0NWLGdCQUFnQm1CLFlBQWNWLGFBQWFDLFNBRTdDLEVBRU1VLG1CQUFxQixLQUMxQlosSUFBSWEsRUFBY1AsS0FBS1EsVUFBVWIsWUFBWSxFQUM3Q08sYUFBYU8sUUFBUSx3QkFBeUJGLENBQVcsQ0FDMUQsRUFFTUcsb0JBQXNCLEtBQzNCLElBQU1DLEVBQVVyQixnQkFBZ0JzQixNQUU1QkQsRUFBUUUsUUFBVSxFQUNyQnRCLHVCQUF1QnVCLE1BQU1DLFFBQVUsU0FFdkN4Qix1QkFBdUJ1QixNQUFNQyxRQUFVLE9BQ3ZDcEIsYUFBYUMsU0FBV2UsRUFDeEJ6QixnQkFBZ0JtQixZQUFjTSxFQUM5QjVCLGdCQUFnQnNCLFlBQWNNLEVBRWhDLEVBRU1LLG9CQUFzQixLQUMzQixDQUFDLEdBQUd4QixhQUFheUIsUUFBUSxJQUN4QixJQUFNQyxFQUFhQyxFQUFNQyxXQUVyQkQsRUFBTUUsUUFDVEgsRUFBV0ksVUFBVUMsSUFBSSxnQ0FBZ0MsRUFFekRMLEVBQVdJLFVBQVVFLE9BQU8sZ0NBQWdDLENBRTlELENBQUMsQ0FDRixFQUVNQyxpQkFBbUIsS0FDeEIsQ0FBQyxHQUFHakMsYUFBYXlCLFFBQVEsSUFDeEIsSUFBTUMsRUFBYUMsRUFBTUMsV0FDbkJNLEVBQW1CUCxFQUFNUSx1QkFBdUJDLGlCQUVsRFYsRUFBV0ksVUFBVU8sU0FBUyxnQ0FBZ0MsSUFDM0RDLEVBQWlCSixFQUFpQkssYUFBYSxLQUFLLEVBRTFEM0MsYUFBYWdCLGFBQWEsTUFBTzBCLENBQWMsRUFDL0NuQyxhQUFhRSxVQUFZaUMsRUFFM0IsQ0FBQyxDQUNGLEVBRUFoQyxxQ0FBcUMsRUFDckNrQixvQkFBb0IsRUFDcEJ4QixZQUFZd0MsaUJBQWlCLFFBQVNoQixtQkFBbUIsRUFDekR2QixnQkFBZ0J1QyxpQkFBaUIsUUFBU3RCLG1CQUFtQixFQUM3RGpCLGdCQUFnQnVDLGlCQUFpQixRQUFTUCxnQkFBZ0IsRUFDMURoQyxnQkFBZ0J1QyxpQkFBaUIsUUFBUzFCLGtCQUFrQiJ9
