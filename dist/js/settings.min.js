const navUserNameSpan=document.querySelector(".nav__greeting-person"),currentNameSpan=document.querySelector(".user-name"),navAvatar=document.querySelector(".nav__avatar"),navAvatarImg=navAvatar.firstElementChild,changeNameInput=document.querySelector(".settings__name-input"),changeNameValidateInfo=document.querySelector(".new-name-input-error"),avatarsForm=document.querySelector(".settings__avatar-list"),settingsSaveBtn=document.querySelector(".settings__btn");let userSettings={userName:"",avatarSrc:""};const downloadUserSettingsFromLocalStorage=()=>{var e=JSON.parse(localStorage.getItem("userSettingsLocalCopy"));null!==e&&(userSettings=e,currentNameSpan.textContent=e.userName)},updateLocalStorage=()=>{var e=JSON.stringify(userSettings);localStorage.setItem("userSettingsLocalCopy",e)},markAvatarAsChecked=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode;e.checked?t.classList.add("settings__avatar-item--checked"):t.classList.remove("settings__avatar-item--checked")}),updateLocalStorage()},updateUserNameInNav=()=>{var e=changeNameInput.value;e.length<=3?changeNameValidateInfo.style.display="block":(changeNameValidateInfo.style.display="none",userSettings.userName=e,currentNameSpan.textContent=e,navUserNameSpan.textContent=e)},updateUserAvatar=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode,e=e.previousElementSibling.lastElementChild;t.classList.contains("settings__avatar-item--checked")&&(t=e.getAttribute("src"),navAvatarImg.setAttribute("src",t),userSettings.avatarSrc=t)}),updateLocalStorage()};downloadUserSettingsFromLocalStorage(),markAvatarAsChecked(),avatarsForm.addEventListener("click",markAvatarAsChecked),settingsSaveBtn.addEventListener("click",updateUserNameInNav),settingsSaveBtn.addEventListener("click",updateUserAvatar);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MubWluLmpzIiwic291cmNlcyI6WyJzZXR0aW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBuYXZVc2VyTmFtZVNwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19ncmVldGluZy1wZXJzb24nKTtcclxuY29uc3QgY3VycmVudE5hbWVTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItbmFtZScpO1xyXG5jb25zdCBuYXZBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X19hdmF0YXInKTtcclxuY29uc3QgbmF2QXZhdGFySW1nID0gbmF2QXZhdGFyLmZpcnN0RWxlbWVudENoaWxkO1xyXG5cclxuY29uc3QgY2hhbmdlTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19uYW1lLWlucHV0Jyk7XHJcbmNvbnN0IGNoYW5nZU5hbWVWYWxpZGF0ZUluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LW5hbWUtaW5wdXQtZXJyb3InKTtcclxuXHJcbmNvbnN0IGF2YXRhcnNGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19hdmF0YXItbGlzdCcpO1xyXG5jb25zdCBzZXR0aW5nc1NhdmVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3NfX2J0bicpO1xyXG5cclxubGV0IHVzZXJTZXR0aW5ncyA9IHtcclxuXHR1c2VyTmFtZTogJycsXHJcblx0YXZhdGFyU3JjOiAnJyxcclxufTtcclxuXHJcbmNvbnN0IGRvd25sb2FkVXNlclNldHRpbmdzRnJvbUxvY2FsU3RvcmFnZSA9ICgpID0+IHtcclxuXHRsZXQgcGFyc2VkQXJyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlclNldHRpbmdzTG9jYWxDb3B5JykpO1xyXG5cclxuXHRpZiAocGFyc2VkQXJyICE9PSBudWxsKSB7XHJcblx0XHR1c2VyU2V0dGluZ3MgPSBwYXJzZWRBcnI7XHJcblx0XHRjdXJyZW50TmFtZVNwYW4udGV4dENvbnRlbnQgPSBwYXJzZWRBcnIudXNlck5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlTG9jYWxTdG9yYWdlID0gKCkgPT4ge1xyXG5cdGxldCBzZXR0aW5nc1N0ciA9IEpTT04uc3RyaW5naWZ5KHVzZXJTZXR0aW5ncyk7XHJcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJTZXR0aW5nc0xvY2FsQ29weScsIHNldHRpbmdzU3RyKTtcclxufTtcclxuXHJcbmNvbnN0IG1hcmtBdmF0YXJBc0NoZWNrZWQgPSAoKSA9PiB7XHJcblx0Wy4uLmF2YXRhcnNGb3JtXS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG5cdFx0Y29uc3QgYXZhdGFySXRlbSA9IGlucHV0LnBhcmVudE5vZGU7XHJcblxyXG5cdFx0aWYgKGlucHV0LmNoZWNrZWQpIHtcclxuXHRcdFx0YXZhdGFySXRlbS5jbGFzc0xpc3QuYWRkKCdzZXR0aW5nc19fYXZhdGFyLWl0ZW0tLWNoZWNrZWQnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGF2YXRhckl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2V0dGluZ3NfX2F2YXRhci1pdGVtLS1jaGVja2VkJyk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHVwZGF0ZUxvY2FsU3RvcmFnZSgpO1xyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlVXNlck5hbWVJbk5hdiA9ICgpID0+IHtcclxuXHRjb25zdCBuZXdOYW1lID0gY2hhbmdlTmFtZUlucHV0LnZhbHVlO1xyXG5cclxuXHRpZiAobmV3TmFtZS5sZW5ndGggPD0gMykge1xyXG5cdFx0Y2hhbmdlTmFtZVZhbGlkYXRlSW5mby5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHR9IGVsc2Uge1xyXG5cdFx0Y2hhbmdlTmFtZVZhbGlkYXRlSW5mby5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0dXNlclNldHRpbmdzLnVzZXJOYW1lID0gbmV3TmFtZTtcclxuXHRcdGN1cnJlbnROYW1lU3Bhbi50ZXh0Q29udGVudCA9IG5ld05hbWU7XHJcblx0XHRuYXZVc2VyTmFtZVNwYW4udGV4dENvbnRlbnQgPSBuZXdOYW1lO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IHVwZGF0ZVVzZXJBdmF0YXIgPSAoKSA9PiB7XHJcblx0Wy4uLmF2YXRhcnNGb3JtXS5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG5cdFx0Y29uc3QgYXZhdGFySXRlbSA9IGlucHV0LnBhcmVudE5vZGU7XHJcblx0XHRjb25zdCBjaGVja2VkQXZhdGFySW1nID0gaW5wdXQucHJldmlvdXNFbGVtZW50U2libGluZy5sYXN0RWxlbWVudENoaWxkO1xyXG5cclxuXHRcdGlmIChhdmF0YXJJdGVtLmNsYXNzTGlzdC5jb250YWlucygnc2V0dGluZ3NfX2F2YXRhci1pdGVtLS1jaGVja2VkJykpIHtcclxuXHRcdFx0Y29uc3QgYXZhdGFyRmlsZVBhdGggPSBjaGVja2VkQXZhdGFySW1nLmdldEF0dHJpYnV0ZSgnc3JjJyk7XHJcblxyXG5cdFx0XHRuYXZBdmF0YXJJbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBhdmF0YXJGaWxlUGF0aCk7XHJcblx0XHRcdHVzZXJTZXR0aW5ncy5hdmF0YXJTcmMgPSBhdmF0YXJGaWxlUGF0aDtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dXBkYXRlTG9jYWxTdG9yYWdlKCk7XHJcbn07XHJcblxyXG5kb3dubG9hZFVzZXJTZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2UoKTtcclxubWFya0F2YXRhckFzQ2hlY2tlZCgpO1xyXG5hdmF0YXJzRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG1hcmtBdmF0YXJBc0NoZWNrZWQpO1xyXG5zZXR0aW5nc1NhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVVc2VyTmFtZUluTmF2KTtcclxuc2V0dGluZ3NTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlVXNlckF2YXRhcik7XHJcbiJdLCJuYW1lcyI6WyJuYXZVc2VyTmFtZVNwYW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjdXJyZW50TmFtZVNwYW4iLCJuYXZBdmF0YXIiLCJuYXZBdmF0YXJJbWciLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoYW5nZU5hbWVJbnB1dCIsImNoYW5nZU5hbWVWYWxpZGF0ZUluZm8iLCJhdmF0YXJzRm9ybSIsInNldHRpbmdzU2F2ZUJ0biIsImxldCIsInVzZXJTZXR0aW5ncyIsInVzZXJOYW1lIiwiYXZhdGFyU3JjIiwiZG93bmxvYWRVc2VyU2V0dGluZ3NGcm9tTG9jYWxTdG9yYWdlIiwicGFyc2VkQXJyIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRleHRDb250ZW50IiwidXBkYXRlTG9jYWxTdG9yYWdlIiwic2V0dGluZ3NTdHIiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwibWFya0F2YXRhckFzQ2hlY2tlZCIsImZvckVhY2giLCJhdmF0YXJJdGVtIiwiaW5wdXQiLCJwYXJlbnROb2RlIiwiY2hlY2tlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInVwZGF0ZVVzZXJOYW1lSW5OYXYiLCJuZXdOYW1lIiwidmFsdWUiLCJsZW5ndGgiLCJzdHlsZSIsImRpc3BsYXkiLCJ1cGRhdGVVc2VyQXZhdGFyIiwiY2hlY2tlZEF2YXRhckltZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJsYXN0RWxlbWVudENoaWxkIiwiY29udGFpbnMiLCJhdmF0YXJGaWxlUGF0aCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGdCQUFrQkMsU0FBU0MsY0FBYyx1QkFBdUIsRUFDaEVDLGdCQUFrQkYsU0FBU0MsY0FBYyxZQUFZLEVBQ3JERSxVQUFZSCxTQUFTQyxjQUFjLGNBQWMsRUFDakRHLGFBQWVELFVBQVVFLGtCQUV6QkMsZ0JBQWtCTixTQUFTQyxjQUFjLHVCQUF1QixFQUNoRU0sdUJBQXlCUCxTQUFTQyxjQUFjLHVCQUF1QixFQUV2RU8sWUFBY1IsU0FBU0MsY0FBYyx3QkFBd0IsRUFDN0RRLGdCQUFrQlQsU0FBU0MsY0FBYyxnQkFBZ0IsRUFFL0RTLElBQUlDLGFBQWUsQ0FDbEJDLFNBQVUsR0FDVkMsVUFBVyxFQUNaLEVBRUEsTUFBTUMscUNBQXVDLEtBQzVDSixJQUFJSyxFQUFZQyxLQUFLQyxNQUFNQyxhQUFhQyxRQUFRLHVCQUF1QixDQUFDLEVBRXRELE9BQWRKLElBQ0hKLGFBQWVJLEVBQ2ZiLGdCQUFnQmtCLFlBQWNMLEVBQVVILFNBRTFDLEVBRU1TLG1CQUFxQixLQUMxQlgsSUFBSVksRUFBY04sS0FBS08sVUFBVVosWUFBWSxFQUM3Q08sYUFBYU0sUUFBUSx3QkFBeUJGLENBQVcsQ0FDMUQsRUFFTUcsb0JBQXNCLEtBQzNCLENBQUMsR0FBR2pCLGFBQWFrQixRQUFRLElBQ3hCLElBQU1DLEVBQWFDLEVBQU1DLFdBRXJCRCxFQUFNRSxRQUNUSCxFQUFXSSxVQUFVQyxJQUFJLGdDQUFnQyxFQUV6REwsRUFBV0ksVUFBVUUsT0FBTyxnQ0FBZ0MsQ0FFOUQsQ0FBQyxFQUVEWixtQkFBbUIsQ0FDcEIsRUFFTWEsb0JBQXNCLEtBQzNCLElBQU1DLEVBQVU3QixnQkFBZ0I4QixNQUU1QkQsRUFBUUUsUUFBVSxFQUNyQjlCLHVCQUF1QitCLE1BQU1DLFFBQVUsU0FFdkNoQyx1QkFBdUIrQixNQUFNQyxRQUFVLE9BQ3ZDNUIsYUFBYUMsU0FBV3VCLEVBQ3hCakMsZ0JBQWdCa0IsWUFBY2UsRUFDOUJwQyxnQkFBZ0JxQixZQUFjZSxFQUVoQyxFQUVNSyxpQkFBbUIsS0FDeEIsQ0FBQyxHQUFHaEMsYUFBYWtCLFFBQVEsSUFDeEIsSUFBTUMsRUFBYUMsRUFBTUMsV0FDbkJZLEVBQW1CYixFQUFNYyx1QkFBdUJDLGlCQUVsRGhCLEVBQVdJLFVBQVVhLFNBQVMsZ0NBQWdDLElBQzNEQyxFQUFpQkosRUFBaUJLLGFBQWEsS0FBSyxFQUUxRDFDLGFBQWEyQyxhQUFhLE1BQU9GLENBQWMsRUFDL0NsQyxhQUFhRSxVQUFZZ0MsRUFFM0IsQ0FBQyxFQUVEeEIsbUJBQW1CLENBQ3BCLEVBRUFQLHFDQUFxQyxFQUNyQ1csb0JBQW9CLEVBQ3BCakIsWUFBWXdDLGlCQUFpQixRQUFTdkIsbUJBQW1CLEVBQ3pEaEIsZ0JBQWdCdUMsaUJBQWlCLFFBQVNkLG1CQUFtQixFQUM3RHpCLGdCQUFnQnVDLGlCQUFpQixRQUFTUixnQkFBZ0IifQ==
