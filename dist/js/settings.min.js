import*as sidebar from"./_sidebar.min.js";import*as nav from"./_nav.min.js";const navUserNameSpan=document.querySelector(".nav__greeting-person"),currentNameSpan=document.querySelector(".user-name"),navAvatar=document.querySelector(".nav__avatar"),navAvatarImg=navAvatar.firstElementChild,changeNameInput=document.querySelector(".settings__name-input"),changeNameValidateInfo=document.querySelector(".new-name-input-error"),avatarsForm=document.querySelector(".settings__avatar-list"),settingsSaveBtn=document.querySelector(".settings__btn");let userSettings={userName:"",avatarSrc:""};const downloadUserSettingsFromLocalStorage=()=>{var e=JSON.parse(localStorage.getItem("userSettingsLocalCopy"));null!==e&&(userSettings=e,navAvatarImg.setAttribute("src",userSettings.avatarSrc),navUserNameSpan.textContent=userSettings.userName,currentNameSpan.textContent=userSettings.userName)},updateLocalStorage=()=>{var e=JSON.stringify(userSettings);localStorage.setItem("userSettingsLocalCopy",e)},updateUserNameInNav=()=>{var e=changeNameInput.value;e.length<=3?changeNameValidateInfo.style.display="block":(changeNameValidateInfo.style.display="none",userSettings.userName=e,currentNameSpan.textContent=e,navUserNameSpan.textContent=e)},markAvatarAsChecked=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode;e.checked?t.classList.add("settings__avatar-item--checked"):t.classList.remove("settings__avatar-item--checked")})},updateUserAvatar=()=>{[...avatarsForm].forEach(e=>{var t=e.parentNode,e=e.previousElementSibling.lastElementChild;t.classList.contains("settings__avatar-item--checked")&&(t=e.getAttribute("src"),navAvatarImg.setAttribute("src",t),userSettings.avatarSrc=t)})};downloadUserSettingsFromLocalStorage(),markAvatarAsChecked(),avatarsForm.addEventListener("click",markAvatarAsChecked),settingsSaveBtn.addEventListener("click",updateUserNameInNav),settingsSaveBtn.addEventListener("click",updateUserAvatar),settingsSaveBtn.addEventListener("click",updateLocalStorage);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MubWluLmpzIiwic291cmNlcyI6WyJzZXR0aW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaWRlYmFyIGZyb20gJy4vX3NpZGViYXIubWluLmpzJztcclxuaW1wb3J0ICogYXMgbmF2IGZyb20gJy4vX25hdi5taW4uanMnO1xyXG5cclxuY29uc3QgbmF2VXNlck5hbWVTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdl9fZ3JlZXRpbmctcGVyc29uJyk7XHJcbmNvbnN0IGN1cnJlbnROYW1lU3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLW5hbWUnKTtcclxuY29uc3QgbmF2QXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdl9fYXZhdGFyJyk7XHJcbmNvbnN0IG5hdkF2YXRhckltZyA9IG5hdkF2YXRhci5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHJcbmNvbnN0IGNoYW5nZU5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nc19fbmFtZS1pbnB1dCcpO1xyXG5jb25zdCBjaGFuZ2VOYW1lVmFsaWRhdGVJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1uYW1lLWlucHV0LWVycm9yJyk7XHJcblxyXG5jb25zdCBhdmF0YXJzRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nc19fYXZhdGFyLWxpc3QnKTtcclxuY29uc3Qgc2V0dGluZ3NTYXZlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19idG4nKTtcclxuXHJcbmxldCB1c2VyU2V0dGluZ3MgPSB7XHJcblx0dXNlck5hbWU6ICcnLFxyXG5cdGF2YXRhclNyYzogJycsXHJcbn07XHJcblxyXG5jb25zdCBkb3dubG9hZFVzZXJTZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2UgPSAoKSA9PiB7XHJcblx0bGV0IHBhcnNlZEFyciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJTZXR0aW5nc0xvY2FsQ29weScpKTtcclxuXHJcblx0aWYgKHBhcnNlZEFyciAhPT0gbnVsbCkge1xyXG5cdFx0dXNlclNldHRpbmdzID0gcGFyc2VkQXJyO1xyXG5cdFx0bmF2QXZhdGFySW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgdXNlclNldHRpbmdzLmF2YXRhclNyYyk7XHJcblx0XHRuYXZVc2VyTmFtZVNwYW4udGV4dENvbnRlbnQgPSB1c2VyU2V0dGluZ3MudXNlck5hbWU7XHJcblx0XHRjdXJyZW50TmFtZVNwYW4udGV4dENvbnRlbnQgPSB1c2VyU2V0dGluZ3MudXNlck5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlTG9jYWxTdG9yYWdlID0gKCkgPT4ge1xyXG5cdGxldCBzZXR0aW5nc1N0ciA9IEpTT04uc3RyaW5naWZ5KHVzZXJTZXR0aW5ncyk7XHJcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJTZXR0aW5nc0xvY2FsQ29weScsIHNldHRpbmdzU3RyKTtcclxufTtcclxuXHJcbmNvbnN0IHVwZGF0ZVVzZXJOYW1lSW5OYXYgPSAoKSA9PiB7XHJcblx0Y29uc3QgbmV3TmFtZSA9IGNoYW5nZU5hbWVJbnB1dC52YWx1ZTtcclxuXHJcblx0aWYgKG5ld05hbWUubGVuZ3RoIDw9IDMpIHtcclxuXHRcdGNoYW5nZU5hbWVWYWxpZGF0ZUluZm8uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0fSBlbHNlIHtcclxuXHRcdGNoYW5nZU5hbWVWYWxpZGF0ZUluZm8uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdHVzZXJTZXR0aW5ncy51c2VyTmFtZSA9IG5ld05hbWU7XHJcblx0XHRjdXJyZW50TmFtZVNwYW4udGV4dENvbnRlbnQgPSBuZXdOYW1lO1xyXG5cdFx0bmF2VXNlck5hbWVTcGFuLnRleHRDb250ZW50ID0gbmV3TmFtZTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBtYXJrQXZhdGFyQXNDaGVja2VkID0gKCkgPT4ge1xyXG5cdFsuLi5hdmF0YXJzRm9ybV0uZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuXHRcdGNvbnN0IGF2YXRhckl0ZW0gPSBpbnB1dC5wYXJlbnROb2RlO1xyXG5cclxuXHRcdGlmIChpbnB1dC5jaGVja2VkKSB7XHJcblx0XHRcdGF2YXRhckl0ZW0uY2xhc3NMaXN0LmFkZCgnc2V0dGluZ3NfX2F2YXRhci1pdGVtLS1jaGVja2VkJyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhdmF0YXJJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3NldHRpbmdzX19hdmF0YXItaXRlbS0tY2hlY2tlZCcpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlVXNlckF2YXRhciA9ICgpID0+IHtcclxuXHRbLi4uYXZhdGFyc0Zvcm1dLmZvckVhY2goKGlucHV0KSA9PiB7XHJcblx0XHRjb25zdCBhdmF0YXJJdGVtID0gaW5wdXQucGFyZW50Tm9kZTtcclxuXHRcdGNvbnN0IGNoZWNrZWRBdmF0YXJJbWcgPSBpbnB1dC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmxhc3RFbGVtZW50Q2hpbGQ7XHJcblxyXG5cdFx0aWYgKGF2YXRhckl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZXR0aW5nc19fYXZhdGFyLWl0ZW0tLWNoZWNrZWQnKSkge1xyXG5cdFx0XHRjb25zdCBhdmF0YXJGaWxlUGF0aCA9IGNoZWNrZWRBdmF0YXJJbWcuZ2V0QXR0cmlidXRlKCdzcmMnKTtcclxuXHJcblx0XHRcdG5hdkF2YXRhckltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGF2YXRhckZpbGVQYXRoKTtcclxuXHRcdFx0dXNlclNldHRpbmdzLmF2YXRhclNyYyA9IGF2YXRhckZpbGVQYXRoO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuZG93bmxvYWRVc2VyU2V0dGluZ3NGcm9tTG9jYWxTdG9yYWdlKCk7XHJcbm1hcmtBdmF0YXJBc0NoZWNrZWQoKTtcclxuYXZhdGFyc0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBtYXJrQXZhdGFyQXNDaGVja2VkKTtcclxuc2V0dGluZ3NTYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlVXNlck5hbWVJbk5hdik7XHJcbnNldHRpbmdzU2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVVzZXJBdmF0YXIpO1xyXG5zZXR0aW5nc1NhdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVMb2NhbFN0b3JhZ2UpO1xyXG4iXSwibmFtZXMiOlsic2lkZWJhciIsIm5hdiIsIm5hdlVzZXJOYW1lU3BhbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImN1cnJlbnROYW1lU3BhbiIsIm5hdkF2YXRhciIsIm5hdkF2YXRhckltZyIsImZpcnN0RWxlbWVudENoaWxkIiwiY2hhbmdlTmFtZUlucHV0IiwiY2hhbmdlTmFtZVZhbGlkYXRlSW5mbyIsImF2YXRhcnNGb3JtIiwic2V0dGluZ3NTYXZlQnRuIiwibGV0IiwidXNlclNldHRpbmdzIiwidXNlck5hbWUiLCJhdmF0YXJTcmMiLCJkb3dubG9hZFVzZXJTZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2UiLCJwYXJzZWRBcnIiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJ1cGRhdGVMb2NhbFN0b3JhZ2UiLCJzZXR0aW5nc1N0ciIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJ1cGRhdGVVc2VyTmFtZUluTmF2IiwibmV3TmFtZSIsInZhbHVlIiwibGVuZ3RoIiwic3R5bGUiLCJkaXNwbGF5IiwibWFya0F2YXRhckFzQ2hlY2tlZCIsImZvckVhY2giLCJhdmF0YXJJdGVtIiwiaW5wdXQiLCJwYXJlbnROb2RlIiwiY2hlY2tlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInVwZGF0ZVVzZXJBdmF0YXIiLCJjaGVja2VkQXZhdGFySW1nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImxhc3RFbGVtZW50Q2hpbGQiLCJjb250YWlucyIsImF2YXRhckZpbGVQYXRoIiwiZ2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ik1BQVlBLGdCQUFhLDBCQUNiQyxZQUFTLGdCQUVyQixNQUFNQyxnQkFBa0JDLFNBQVNDLGNBQWMsdUJBQXVCLEVBQ2hFQyxnQkFBa0JGLFNBQVNDLGNBQWMsWUFBWSxFQUNyREUsVUFBWUgsU0FBU0MsY0FBYyxjQUFjLEVBQ2pERyxhQUFlRCxVQUFVRSxrQkFFekJDLGdCQUFrQk4sU0FBU0MsY0FBYyx1QkFBdUIsRUFDaEVNLHVCQUF5QlAsU0FBU0MsY0FBYyx1QkFBdUIsRUFFdkVPLFlBQWNSLFNBQVNDLGNBQWMsd0JBQXdCLEVBQzdEUSxnQkFBa0JULFNBQVNDLGNBQWMsZ0JBQWdCLEVBRS9EUyxJQUFJQyxhQUFlLENBQ2xCQyxTQUFVLEdBQ1ZDLFVBQVcsRUFDWixFQUVBLE1BQU1DLHFDQUF1QyxLQUM1Q0osSUFBSUssRUFBWUMsS0FBS0MsTUFBTUMsYUFBYUMsUUFBUSx1QkFBdUIsQ0FBQyxFQUV0RCxPQUFkSixJQUNISixhQUFlSSxFQUNmWCxhQUFhZ0IsYUFBYSxNQUFPVCxhQUFhRSxTQUFTLEVBQ3ZEZCxnQkFBZ0JzQixZQUFjVixhQUFhQyxTQUMzQ1YsZ0JBQWdCbUIsWUFBY1YsYUFBYUMsU0FFN0MsRUFFTVUsbUJBQXFCLEtBQzFCWixJQUFJYSxFQUFjUCxLQUFLUSxVQUFVYixZQUFZLEVBQzdDTyxhQUFhTyxRQUFRLHdCQUF5QkYsQ0FBVyxDQUMxRCxFQUVNRyxvQkFBc0IsS0FDM0IsSUFBTUMsRUFBVXJCLGdCQUFnQnNCLE1BRTVCRCxFQUFRRSxRQUFVLEVBQ3JCdEIsdUJBQXVCdUIsTUFBTUMsUUFBVSxTQUV2Q3hCLHVCQUF1QnVCLE1BQU1DLFFBQVUsT0FDdkNwQixhQUFhQyxTQUFXZSxFQUN4QnpCLGdCQUFnQm1CLFlBQWNNLEVBQzlCNUIsZ0JBQWdCc0IsWUFBY00sRUFFaEMsRUFFTUssb0JBQXNCLEtBQzNCLENBQUMsR0FBR3hCLGFBQWF5QixRQUFRLElBQ3hCLElBQU1DLEVBQWFDLEVBQU1DLFdBRXJCRCxFQUFNRSxRQUNUSCxFQUFXSSxVQUFVQyxJQUFJLGdDQUFnQyxFQUV6REwsRUFBV0ksVUFBVUUsT0FBTyxnQ0FBZ0MsQ0FFOUQsQ0FBQyxDQUNGLEVBRU1DLGlCQUFtQixLQUN4QixDQUFDLEdBQUdqQyxhQUFheUIsUUFBUSxJQUN4QixJQUFNQyxFQUFhQyxFQUFNQyxXQUNuQk0sRUFBbUJQLEVBQU1RLHVCQUF1QkMsaUJBRWxEVixFQUFXSSxVQUFVTyxTQUFTLGdDQUFnQyxJQUMzREMsRUFBaUJKLEVBQWlCSyxhQUFhLEtBQUssRUFFMUQzQyxhQUFhZ0IsYUFBYSxNQUFPMEIsQ0FBYyxFQUMvQ25DLGFBQWFFLFVBQVlpQyxFQUUzQixDQUFDLENBQ0YsRUFFQWhDLHFDQUFxQyxFQUNyQ2tCLG9CQUFvQixFQUNwQnhCLFlBQVl3QyxpQkFBaUIsUUFBU2hCLG1CQUFtQixFQUN6RHZCLGdCQUFnQnVDLGlCQUFpQixRQUFTdEIsbUJBQW1CLEVBQzdEakIsZ0JBQWdCdUMsaUJBQWlCLFFBQVNQLGdCQUFnQixFQUMxRGhDLGdCQUFnQnVDLGlCQUFpQixRQUFTMUIsa0JBQWtCIn0=
